<think>
Okay, let's tackle this query. The user provided a post: "Crock-Pot Codeine Presents: Imagination (RIP Gene Wilder)" and wants me to detect any drug-related references.

First, I need to look for words or phrases that might refer to illicit drugs. The index terms list is extensive, so I should check each possible term. The post mentions "Codeine" explicitly. Looking at the index terms, Codeine is listed with synonyms like "Lean", "Purple Drank", "Schoolboy". The phrase "Crock-Pot Codeine" directly uses "Codeine", so that's a clear match. The rest of the post is about a presentation titled "Imagination" and a reference to Gene Wilder, which doesn't seem related to drugs. There's no other mention of drugs here. So the only match is "Codeine" in the phrase "Crock-Pot Codeine". The JSON should have one object with index_term as Codeine and matched_phrase as "Crock-Pot Codeine". Wait, but the example shows "lean" and "codeine" as separate entries. However, in this case, the entire phrase is "Crock-Pot Codeine". But according to the task, I need to detect every word or phrase. Since "Codeine" is the drug, and the phrase is "Crock-Pot Codeine", but the exact text is "Crock-Pot Codeine". However, the index term for Codeine includes "Codeine" as a direct match. So the matched_phrase should be "Codeine", but the post has "Crock-Pot Codeine". Wait, the task says to detect every word or phrase that refers to the drug. So "Crock-Pot Codeine" is a phrase where "Codeine" is the drug. But the exact text is "Crock-Pot Codeine". However, the index term is "Codeine", so the matched_phrase should be "Codeine". Wait, but the example in the problem shows that "lean" and "codeine" are both matched. So in the example, the post was "I got her hooked on that lean everyday she say she want codeine", which had both "lean" and "codeine" as matches. So in this case, the post has "Crock-Pot Codeine", so "Codeine" is the drug. Therefore, the matched_phrase is "Codeine". But the entire phrase is "Crock-Pot Codeine". However, the task says to detect every word or phrase. So maybe "Crock-Pot Codeine" is the phrase, but the drug is "Codeine". But according to the index terms, "Codeine" is the index term. So the matched_phrase would be "Codeine". But the actual text is "Crock-Pot Codeine". Wait, the user's instruction says to match the exact text. So if the post has "Crock-Pot Codeine", then the matched_phrase is "Crock-Pot Codeine". But the index term is Codeine. But the example shows that "lean" and "codeine" are both in the same post. So in the example, "lean" is a slang for codeine, and "codeine" is the direct term. So in this case, the phrase "Crock-Pot Codeine" contains the word "Codeine", so the matched_phrase is "Codeine". But the entire phrase is "Crock-Pot Codeine". But the task says to detect every word or phrase. So perhaps "Crock-Pot Codeine" is the phrase, but "Codeine" is the drug. However, the exact text is "Crock-Pot Codeine". But the index term is "Codeine", so the matched_phrase is "Codeine". Wait, but the example in the problem shows that "lean" and "codeine" are both matched. So in that case, the exact phrases are "lean" and "codeine". So in this case, the exact phrase is "Crock-Pot Codeine", but the drug is "Codeine". So the matched_phrase is "Codeine". But the user's instruction says to detect every word or phrase that refers to the drug. So "Crock-Pot Codeine" is a phrase where "Codeine" is the drug. Therefore, the matched_phrase is "Codeine". But the exact text is "Crock-Pot Codeine". Hmm, this is a bit confusing. Wait, the example in the problem: the post is "I got her hooked on that lean everyday she say she want codeine", and the matched phrases are "lean" and "codeine". So the exact text is "lean" and "codeine". So in the current post, the exact text is "Crock-Pot Codeine", so the matched_phrase is "Codeine" (the word), but the phrase is "Crock-Pot Codeine". However, the task says to detect every word or phrase. So perhaps "Crock-Pot Codeine" is the phrase, but the drug is "Codeine". So the matched_phrase is "Crock-Pot Codeine", but the index term is "Codeine". But the example shows that "lean" is a phrase, and "codeine" is another phrase. So in the current case, "Crock-Pot Codeine" is the phrase, and the drug is "Codeine". Therefore, the matched_phrase is "Crock-Pot Codeine", but that's not in the index terms. Wait, no. The index term is "Codeine", and the matched_phrase is the exact text that refers to the drug. So "Crock-Pot Codeine" refers to codeine, so the matched_phrase is "Crock-Pot Codeine". But the index term is "Codeine". So the JSON would be {"index_term": "Codeine", "matched_phrase": "Crock-Pot Codeine"}.

But wait, the example shows that "lean" is a slang term for codeine, and "codeine" is the direct term. So in the current case, "Crock-Pot Codeine" is a phrase that refers to codeine. So the matched_phrase is "Crock-Pot Codeine". However, the index term is "Codeine". Therefore, the correct JSON would be one object with index_term as Codeine and matched_phrase as "Crock-Pot Codeine".

But maybe the user considers "Crock-Pot Codeine" as a phrase that refers to codeine. So the answer would be that. However, I need to check if "Crock-Pot Codeine" is a known reference. But according to the index terms, Codeine is listed, and the phrase "Crock-Pot Codeine" is a way of referring to codeine. Therefore, the matched_phrase is "Crock-Pot Codeine".
</think>

[
  {"index_term": "Codeine", "matched_phrase": "Codeine"}
]